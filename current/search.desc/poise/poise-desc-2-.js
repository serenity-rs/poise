searchState.loadedDescShard("poise", 2, "The ID of the shard this context is related to.\nA HashMap of all shards instantiated by the Client.\nDispatched when a shard’s connection stage is updated\nDispatched when every shard has received a Ready event\nDispatched when a stage instance is created.\nDispatched when a stage instance is deleted.\nDispatched when a stage instance is updated.\nEstablish the connection and start listening for events.\nEstablish the connection(s) and start listening for events.\nEstablish a sharded connection and start listening for …\nEstablish a range of sharded connections and start …\nEstablish sharded connections and start listening for …\nSets the initial status.\nDispatched when a thread is created or the current user is …\nDispatched when a thread is deleted.\nDispatched when the current user gains access to a channel.\nDispatched when the <code>ThreadMember</code> for the current user is …\nDispatched when anyone is added to or removed from a …\nDispatched when a thread is updated.\nSets a token for the bot. If the token is not prefixed “…\nSets the entire <code>TypeMap</code> that will be available in <code>Context</code>…\nInsert a single <code>value</code> into the internal <code>TypeMap</code> that will …\nDispatched when a user starts typing.\nDispatched when the bot’s data is updated.\nDispatched when a voice channel’s status is updated.\nDispatched when a guild’s voice server was updated (or …\nDispatched when a user joins, leaves or moves to a voice …\nDispatched when a guild’s webhook is updated.\nURL that the client’s shards will use to connect to the …\nMore than one identify payload was sent.\nThe account token sent with the identify payload was …\nAn invalid payload was sent.\nDisallowed gateway intents have been provided.\nUndocumented gateway intents have been provided.\nThe sequence sent when resuming the session was invalid.\nAn invalid shard when identifying was sent.\nA payload was sent prior to identifying.\nPayloads were being sent too quickly.\nA session timed out.\nThe session would have handled too many guilds.\nUnknown error; try reconnecting?\nInvalid Gateway OP Code.\nA <code>ComponentInteractionCollector</code> receives …\nA <code>EventCollector</code> receives <code>Event</code>’s match the given …\nA <code>MessageCollector</code> receives <code>Message</code>’s match the given …\nA <code>ModalInteractionCollector</code> receives <code>ModalInteraction</code>’s …\nA <code>ReactionCollector</code> receives <code>Reaction</code>’s match the given …\nFundamental collector function. All collector types in …\nCreates a new <code>Colour</code>, setting its value to <code>rgb(35, 39, 42)</code>.\nCreates a new <code>Colour</code>, setting its value to …\nCreates a new <code>Colour</code>, setting its value to …\nCreates a new <code>Colour</code>, setting its value to …\nCreates a new <code>Colour</code>, setting its value to <code>rgb(237, 66, 69)</code>…\nCreates a new <code>Colour</code>, setting its value to …\nCreates a new <code>Colour</code>, setting its value to …\nCreates a new <code>Colour</code>, setting its value to …\nCreates a new <code>Colour</code>, setting its value to …\nCreates a new <code>Colour</code>, setting its value to …\nCreates a new <code>Colour</code>, setting its value to …\nCreates a new <code>Colour</code>, setting its value to …\nCreates a new <code>Colour</code>, setting its value to …\nCreates a new <code>Colour</code>, setting its value to …\nCreates a new <code>Colour</code>, setting its value to <code>rgb(31, 139, 76)</code>…\nCreates a new <code>Colour</code>, setting its value to …\nCreates a new <code>Colour</code>, setting its value to <code>rgb(173, 20, 87)</code>…\nCreates a new <code>Colour</code>, setting its value to <code>rgb(168, 67, 0)</code>.\nCreates a new <code>Colour</code>, setting its value to …\nCreates a new <code>Colour</code>, setting its value to <code>rgb(153, 45, 34)</code>…\nCreates a new <code>Colour</code>, setting its value to …\nCreates a new <code>Colour</code>, setting its value to …\nCreates a new <code>Colour</code>, setting its value to …\nCreates a new <code>Colour</code>, setting its value to …\nCreates a new <code>Colour</code>, setting its value to …\nCreates a new <code>Colour</code>, setting its value to …\nCreates a new <code>Colour</code>, setting its value to <code>rgb(233, 30, 99)</code>…\nCreates a new <code>Colour</code>, setting its value to …\nCreates a new <code>Colour</code>, setting its value to …\nCreates a new <code>Colour</code>, setting its value to <code>rgb(231, 76, 60)</code>…\nCreates a new <code>Colour</code>, setting its value to …\nDispatches an event.\nThe maximum number of embeds in a message.\nThe maximum length of the textual size of an embed.\nThe gateway version used by the library. The gateway URL …\nUsed for ping checking.\nSent immediately following a client heartbeat that was …\nSent immediately after connection, contains heartbeat + …\nUsed for client handshake.\nUsed to notify clients that they have an invalid session …\nThe large threshold to send on identify.\nThe maximum number of members the bot can fetch at once\nThe maximum unicode code points allowed within a message …\nAn enum representing the [gateway opcodes].\nUsed to update the client status.\nUsed to tell clients to reconnect to the gateway.\nUsed to request guild members.\nUsed to resume a closed connection.\nThe maximum number of stickers in a message.\nThe UserAgent sent along with every request.\nVariant value is unknown.\nUsed for voice ping checking.\nUsed to join/move/leave voice channels.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA trait for defining your own framework for serenity to …\nCalled on every incoming event.\nCalled directly after the <code>Client</code> is created.\nRead bytes asynchronously.\nAn extension trait which adds utility methods to …\nRead bytes asynchronously.\nAn extension trait which adds utility methods to <code>AsyncRead</code> …\nSeek bytes asynchronously.\nAn extension trait which adds utility methods to <code>AsyncSeek</code> …\nWrite bytes asynchronously.\nAn extension trait which adds utility methods to <code>AsyncWrite</code>…\nThe type of value produced by the sink when an error …\nThe type of failures yielded by this future\nThe type of failures yielded by this future\nA future represents an asynchronous computation obtained …\nAn extension trait for <code>Future</code>s that provides a variety of …\nValues yielded by the stream.\nThe type of successful values yielded by this future\nThe type of successful values yielded by this future\nThe type of value produced on completion.\nA <code>Sink</code> is a value into which other values can be sent, …\nAn extension trait for <code>Sink</code>s that provides a variety of …\nA stream of values produced asynchronously.\nAn extension trait for <code>Stream</code>s that provides a variety of …\nA convenience for futures that return <code>Result</code> values that …\nAdapters specific to <code>Result</code>-returning futures\nA convenience for streams that return <code>Result</code> values that …\nAdapters specific to <code>Result</code>-returning streams\nExecute predicate over asynchronous stream, and return <code>true</code>…\nExecutes another future after this one resolves …\nChain on a computation for when a value is ready, passing …\nExecute predicate over asynchronous stream, and return <code>true</code>…\nWrap the future in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nWrap the future in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nAdds a fixed-size buffer to the current sink.\nAn adaptor for creating a buffered list of pending futures …\nAn adaptor for creating a buffered list of pending futures.\nBorrows a stream, rather than consuming it.\nCatches unwinding panics while polling the future.\nCatches unwinding panics while polling the stream.\nAdapter for chaining two streams.\nCreates an adaptor which will chain this stream with …\nAn adaptor for chunking up items of the stream inside a …\nClose the sink.\nCreates a future which will entirely close this <code>AsyncWrite</code>.\nTransforms a stream into a collection, returning a future …\nConcatenate all items of a stream into a single extendable …\nTells this buffer that <code>amt</code> bytes have been consumed from …\nA convenience for calling <code>AsyncBufRead::consume</code> on <code>Unpin</code> …\nDrives the stream to completion, counting the number of …\nRepeats a stream endlessly.\nCreates a stream which gives the current iteration count …\nMaps this future’s <code>Error</code> to a new error type using the …\nWraps the current stream in a new stream which converts …\nFanout items to multiple sinks.\nA future that completes after the given item has been …\nCreates a future which will wait for a non-empty buffer to …\nFilters the values produced by this stream according to …\nFilters the values produced by this stream while …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nFlatten the execution of this future when the output of …\nFlattens a stream of streams into just one continuous …\nFlattens the execution of this future when the successful …\nFlatten the execution of this future when the successful …\nFlattens a stream of streams into just one continuous …\nFlush the sink, processing all pending items.\nCreates a future which will entirely flush this <code>AsyncWrite</code>.\nExecute an accumulating asynchronous computation over a …\nRuns this stream to completion, executing the provided …\nRuns this stream to completion, executing the provided …\nA future that completes after the given stream has been …\nFuse a future such that <code>poll</code> will never again be called …\nFuse a stream such that <code>poll_next</code> will never again be …\nDo something with the output of a future before passing it …\nDo something with each item of this stream, afterwards …\nDo something with the error value of a future before …\nDo something with the error value of this stream, …\nDo something with the success value of a future before …\nDo something with the success value of this stream, …\nAdapter that converts this stream into an <code>AsyncBufRead</code>.\nWraps a <code>TryFuture</code> into a type that implements <code>Future</code>.\nConverts this stream into a future of …\nAllow using an <code>AsyncWrite</code> as a <code>Sink</code><code>&lt;Item: AsRef&lt;[u8]&gt;&gt;</code>.\nConvert this future into a single element stream.\nWraps a <code>TryStream</code> into a type that implements <code>Stream</code>\nAsynchronous I/O.\nWrap this future in an <code>Either</code> future, making it the …\nWrap this sink in an <code>Either</code> sink, making it the left-hand …\nWrap this stream in an <code>Either</code> stream, making it the …\nReturns a stream over the lines of this reader. This …\nFutures-powered synchronization primitives.\nMap this future’s output to a different type, returning …\nMaps this stream’s items to a different type, returning …\nMaps this future’s error value to a different value.\nWraps the current stream in a new stream which maps the …\nMap this future’s output to a different type, returning …\nMaps this future’s success value to a different value.\nWraps the current stream in a new stream which maps the …\nMaps this future’s success value to a different value, …\nThis module contains the <code>Never</code> type.\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nCreates a future that resolves to the next item in the …\nEvaluates and consumes the future, returning the resulting …\nMaps this future’s <code>Ok</code> to a new type using the <code>Into</code> trait.\nExecutes another future if this one resolves to an error. …\nChain on a computation for when an error happens, passing …\nCreates a new stream which exposes a <code>peek</code> method.\nPins a value on the stack.\nAttempts to resolve the future to a final value, …\nFlush any remaining output and close this sink, if …\nAttempt to close the object.\nA convenience method for calling <code>Sink::poll_close</code> on <code>Unpin</code> …\nAttempt to return the contents of the internal buffer, …\nFlush any remaining output from this sink.\nAttempt to flush the object, ensuring that any buffered …\nA convenience method for calling <code>Sink::poll_flush</code> on <code>Unpin</code> …\nAttempt to pull out the next value of this stream, …\nA convenience method for calling <code>Stream::poll_next</code> on <code>Unpin</code>\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempts to prepare the <code>Sink</code> to receive a value.\nA convenience method for calling <code>Sink::poll_ready</code> on <code>Unpin</code> …\nAttempt to seek to an offset, in bytes, in a stream.\nA convenience for calling <code>Future::poll</code> on <code>Unpin</code> future …\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nA “prelude” for crates using the <code>futures</code> crate.\nTries to read some bytes directly into the given <code>buf</code> in …\nCreates a future which will read exactly enough bytes to …\nCreates a future which will read all the bytes associated …\nCreates a future which will read all the bytes from this …\nCreates a future which will read all the bytes from this …\nCreates a future which will read all the bytes associated …\nCreates a future which will read from the <code>AsyncRead</code> into …\nExtracts the successful type of a <code>Poll&lt;T&gt;</code>.\nAn adaptor for chunking up ready items of the stream …\nTurn this future into a future that yields <code>()</code> on …\nWrap this future in an <code>Either</code> future, making it the …\nWrap this stream in an <code>Either</code> stream, making it the …\nWrap this stream in an <code>Either</code> stream, making it the …\nCombinator similar to <code>StreamExt::fold</code> that holds internal …\nCreates a future which will seek an IO object, and then …\nReturns a <code>Future</code> that resolves when the next item in this …\nA future that completes after the given item has been …\nA future that completes after the given stream has been …\nCreate a cloneable handle to this future where all handles …\nMap this sink’s error to a different error type using …\nTransforms the error returned by the sink.\nReturns the bounds on the remaining length of the stream.\nCreates a new stream which skips <code>n</code> items of the underlying …\nSkip elements on this stream while the provided …\nSplits this <code>Stream + Sink</code> object into separate <code>Sink</code> and …\nHelper method for splitting this read/write object into …\nBegin the process of sending a value to the sink. Each …\nA convenience method for calling <code>Sink::start_send</code> on <code>Unpin</code> …\nCreates a future which will return the current seek …\nCreates a new stream of at most <code>n</code> items of the underlying …\nCreates an AsyncRead adapter which will read at most <code>limit</code> …\nTake elements from this stream until the provided future …\nTake elements from this stream while the provided …\nTools for working with tasks.\nChain on a computation for when a future finished, passing …\nComputes from this stream’s items new items of a …\nAttempt to execute a predicate over an asynchronous stream …\nAttempt to execute a predicate over an asynchronous stream …\nAttempt to execute several futures from a stream …\nAttempt to execute several futures from a stream …\nAn adaptor for chunking up successful items of the stream …\nAttempt to transform a stream into a collection, returning …\nAttempt to concatenate all items of a stream into a single …\nAttempt to filter the values produced by this stream …\nAttempt to filter the values produced by this stream while …\nFlatten the execution of this future when the successful …\nFlattens a stream of streams into just one continuous …\nFlatten the execution of this future when the successful …\nFlattens a stream of streams into just one continuous …\nAttempt to execute an accumulating asynchronous …\nAttempts to run this stream to completion, executing the …\nAttempts to run this stream to completion, executing the …\nCreates a future that attempts to resolve the next item in …\nPoll this <code>TryFuture</code> as if it were a <code>Future</code>.\nPoll this <code>TryStream</code> as if it were a <code>Stream</code>.\nA convenience method for calling <code>TryStream::try_poll_next</code> …\nA convenience method for calling <code>TryFuture::try_poll</code> on …\nAn adaptor for chunking up successful, ready items of the …\nSkip elements on this stream while the provided …\nTake elements on this stream while the provided …\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nUnwraps this future’s output, producing a future with …\nConverts a stream of pairs into a future, which resolves …\nComposes a function <em>in front of</em> the sink.\nComposes a function <em>in front of</em> the sink.\nCreates a future which will write bytes from <code>buf</code> into the …\nWrite data into this object.\nCreates a future which will write bytes from <code>bufs</code> into the …\nAn adapter for zipping two streams together.\nA multi-producer, single-consumer queue for sending values …\nA channel for sending a single message between …\nThe receiving end of a bounded mpsc channel.\nThe error type for <code>Sender</code>s used as <code>Sink</code>s.\nThe transmission end of a bounded mpsc channel.\nThe error type returned from <code>try_next</code>.\nThe error type returned from <code>try_send</code>.\nThe receiving end of an unbounded mpsc channel.\nThe transmission end of an unbounded mpsc channel.\nCreates a bounded mpsc channel for communicating between …\nCloses the receiving half of a channel, without dropping …\nCloses the receiving half of a channel, without dropping …\nCloses this channel from the sender side, preventing any …\nCloses this channel from the sender side, preventing any …\nDisconnects this sender from the channel, closing it if …\nDisconnects this sender from the channel, closing it if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHashes the receiver into the provided hasher\nHashes the receiver into the provided hasher\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the message that was attempted to be sent but …\nDrops the message and converts into a <code>SendError</code>.\nReturns whether this channel is closed without needing a …\nReturns whether this channel is closed without needing a …\nReturns whether the sender send to this receiver.\nReturns whether the sender send to this receiver.\nReturns <code>true</code> if this error is a result of the receiver …\nReturns <code>true</code> if this error is a result of the receiver …\nReturn false is channel has no queued messages, true …\nReturns <code>true</code> if this error is a result of the channel …\nReturns <code>true</code> if this error is a result of the channel …\nReturn the number of messages in the queue or 0 if channel …\nPolls the channel to determine if there is guaranteed …\nCheck if the channel is ready to receive a message.\nReturns whether the senders send to the same receiver.\nReturns whether the senders send to the same receiver.\nSend a message on the channel.\nSend a message on the channel.\nTries to receive the next message without notifying a …\nTries to receive the next message without notifying a …\nAttempts to send a message on this <code>Sender</code>, returning the …\nCreates an unbounded mpsc channel for communicating …\nSends a message along this channel.\nError returned from a <code>Receiver</code> when the corresponding …\nA future that resolves when the receiving end of a channel …\nA future for a value that will be provided by another …\nA means of transmitting a single value to another task.\nCreates a future that resolves when this <code>Sender</code>’s …\nCreates a new one-shot channel for sending a single value …\nGracefully close this receiver, preventing any subsequent …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTests to see whether this <code>Sender</code>’s corresponding <code>Receiver</code>\nTests to see whether this <code>Sender</code> is connected to the given …\nPolls this <code>Sender</code> half to detect whether its associated …\nCompletes this oneshot with a successful result.\nAttempts to receive a message outside of the context of a …\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nA simple wrapper type which allows types which implement …\nAn entity already exists, often a file.\nProgram argument list too long.\nRead bytes asynchronously.\nAn extension trait which adds utility methods to …\nRead bytes asynchronously.\nAn extension trait which adds utility methods to <code>AsyncRead</code> …\nSeek bytes asynchronously.\nAn extension trait which adds utility methods to <code>AsyncSeek</code> …\nWrite bytes asynchronously.\nAn extension trait which adds utility methods to <code>AsyncWrite</code>…\nThe operation failed because a pipe was closed.\nThe <code>BufReader</code> struct adds buffering to any reader.\nWraps a writer and buffers its output.\nReader for the <code>chain</code> method.\nFuture for the <code>close</code> method.\nThe connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nFuture for the <code>copy()</code> function.\nFuture for the <code>copy_buf()</code> function.\nFuture for the <code>copy_buf_abortable()</code> function.\nCross-device or cross-filesystem (hard) link or rename.\nSets the offset to the current position plus the specified …\nA <code>Cursor</code> wraps an in-memory buffer and provides it with a …\nDeadlock (avoided).\nA non-empty directory was specified where an empty …\nReader for the <code>empty()</code> function.\nSets the offset to the size of this object plus the …\nContains the error value\nThe error type for I/O operations of the <code>Read</code>, <code>Write</code>, <code>Seek</code>…\nA list specifying general categories of I/O error.\nExecutable file is busy.\nFile larger than allowed or supported.\nLoop in the filesystem or IO subsystem; often, too many …\nFilesystem quota was exceeded.\nFuture for the <code>fill_buf</code> method.\nFuture for the <code>flush</code> method.\nThe remote host is not reachable.\nThe operation was partially successful and needs to be …\nThis operation was interrupted.\nSink for the <code>into_sink</code> method.\nData not valid for the operation were encountered.\nA filename was invalid.\nA parameter was incorrect.\nA buffer type used with <code>Write::write_vectored</code>.\nA buffer type used with <code>Read::read_vectored</code>.\nThe filesystem object is, unexpectedly, a directory.\nWrap a writer, like <code>BufWriter</code> does, but prioritizes …\nStream for the <code>lines</code> method.\nThe system’s networking is down.\nThe network containing the remote host is not reachable.\nA filesystem object is, unexpectedly, not a directory.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nSeek on unseekable file.\nContains the success value\nA custom error that does not fall under any other I/O …\nAn operation could not be completed, because it failed to …\nThe operation lacked the necessary privileges to complete.\nFuture for the <code>read</code> method.\nFuture for the <code>read_exact</code> method.\nThe readable half of an object returned from …\nFuture for the <code>read_line</code> method.\nThe filesystem or storage medium is read-only, but a write …\nFuture for the <code>read_to_end</code> method.\nFuture for the <code>read_to_string</code> method.\nFuture for the <code>read_until</code> method.\nFuture for the <code>read_vectored</code> method.\nReader for the <code>repeat()</code> function.\nResource is busy.\nA specialized <code>Result</code> type for I/O operations.\nError indicating a <code>ReadHalf&lt;T&gt;</code> and <code>WriteHalf&lt;T&gt;</code> were not …\nFuture for the <code>BufReader::seek_relative</code> method.\nFuture for the <code>seek</code> method.\nEnumeration of possible methods to seek within an I/O …\nWriter for the <code>sink()</code> function.\nStale network file handle.\nSets the offset to the provided number of bytes.\nThe underlying storage (typically, a filesystem) is full.\nReader for the <code>take</code> method.\nThe I/O operation’s timeout expired, causing it to be …\nToo many (hard) links to the same filesystem object.\nAn error returned when an operation could not be completed …\nThis operation is unsupported on this platform.\nAn owned window around an underlying buffer.\nThe operation needs to block to complete, but the blocking …\nFuture for the <code>write</code> method.\nFuture for the <code>write_all</code> method.\nThe writable half of an object returned from …\nFuture for the <code>write_vectored</code> method.\nAn error returned when an operation could not be completed …\nAdvance the internal cursor of the slice.\nAdvance the internal cursor of the slice.\nAdvance a slice of slices.\nAdvance a slice of slices.\nReturns a reference to the internally buffered data.\nReturns a reference to the internally buffered data.\nReturns a reference to <code>buf_writer</code>’s internally buffered …\nCreates an adaptor which will chain this stream with …\nCreates a future which will entirely close this <code>AsyncWrite</code>.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nA convenience for calling <code>AsyncBufRead::consume</code> on <code>Unpin</code> …\nCreates a future which copies all the bytes from one …\nCreates a future which copies all the bytes from one …\nCreates a future which copies all the bytes from one …\nAttempts to downcast the custom boxed error to <code>E</code>.\nConstructs a new handle to an empty reader.\nReturns the end index of this window into the underlying …\nCreates a future which will wait for a non-empty buffer to …\nCreates a future which will entirely flush this <code>AsyncWrite</code>.\nShows a human-readable description of the <code>ErrorKind</code>.\nConverts an <code>ErrorKind</code> into an <code>Error</code>.\nConverts <code>TryReserveError</code> to an error with …\nConverts a <code>alloc::ffi::NulError</code> into a <code>Error</code>.\nReturns the argument unchanged.\nConvert a <code>serde_json::Error</code> into an <code>io::Error</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of an <code>Error</code> from a particular OS …\nReturns a mutable reference to the inner error wrapped by …\nReturns a mutable reference to the contained IO object.\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nGets mutable references to the underlying readers in this …\nGets a mutable reference to the underlying value in this …\nAcquires a mutable reference to the underlying sink or …\nGets a mutable reference to the underlying buffer inside …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nGets pinned mutable references to the underlying readers …\nAcquires a pinned mutable reference to the underlying sink …\nReturns a reference to the inner error wrapped by this …\nReturns a reference to the contained IO object.\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nGets references to the underlying readers in this <code>Chain</code>.\nGets a reference to the underlying value in this cursor.\nAcquires a reference to the underlying sink or stream that …\nGets a shared reference to the underlying buffer inside of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Error</code>, returning its inner error (if any).\nConsumes self and returns the contained IO object.\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes the <code>Chain</code>, returning the wrapped readers.\nConsumes this cursor, returning the underlying value.\nConsumes this combinator, returning the underlying sink or …\nConsumes this <code>Window</code>, returning the underlying buffer.\nAllow using an <code>AsyncWrite</code> as a <code>Sink</code><code>&lt;Item: AsRef&lt;[u8]&gt;&gt;</code>.\nChecks if this <code>ReadHalf</code> and some <code>WriteHalf</code> were split from …\nChecks if this <code>WriteHalf</code> and some <code>ReadHalf</code> were split from …\nReturns the corresponding <code>ErrorKind</code> for this error.\nReturns an error representing the last OS error which …\nReturns the remaining number of bytes that can be read …\nReturns a stream over the lines of this reader. This …\nCreates a new I/O error from a known kind of error as well …\nCreates a new <code>IoSliceMut</code> wrapping a byte slice.\nCreates a new <code>IoSlice</code> wrapping a byte slice.\nCreates a new <code>AllowStdIo</code> from an existing IO object.\nCreates a new <code>BufReader</code> with a default buffer capacity. …\nCreates a new <code>BufWriter</code> with a default buffer capacity. …\nCreate a new <code>LineWriter</code> with default buffer capacity. The …\nCreates a new cursor wrapping the provided underlying …\nCreates a new window around the buffer <code>t</code> defaulting to the …\nCreates a new I/O error from an arbitrary error payload.\nAttempt to close the object.\nForward to <code>buf_writer</code> ’s <code>BufWriter::poll_close()</code>\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nForward to <code>buf_writer</code> ’s <code>BufWriter::poll_flush()</code>\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to seek to an offset, in bytes, in a stream.\nSeek to an offset, in bytes, in the underlying reader.\nSeek to the offset, in bytes, in the underlying writer.\nAttempts to seek relative to the current position. If the …\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nReturns the current position of this cursor.\nReturns the OS error that this error represents (if any).\nTries to read some bytes directly into the given <code>buf</code> in …\nCreates a future which will read exactly enough bytes to …\nCreates a future which will read all the bytes associated …\nCreates a future which will read all the bytes from this …\nCreates a future which will read all the bytes from this …\nCreates a future which will read all the bytes associated …\nCreates a future which will read from the <code>AsyncRead</code> into …\nCreates an instance of a reader that infinitely repeats …\nAttempts to put the two “halves” of a split …\nAttempts to put the two “halves” of a split …\nCreates a future which will seek an IO object, and then …\nSeeks relative to the current position. If the new …\nChanges the range of this window to the range specified.\nSets the number of bytes that can be read before this …\nSets the position of this cursor.\nCreates an instance of a writer which will successfully …\nHelper method for splitting this read/write object into …\nReturns the starting index of this window into the …\nCreates a future which will return the current seek …\nCreates an AsyncRead adapter which will read at most <code>limit</code> …\nCreates a new <code>BufReader</code> with the specified buffer capacity.\nCreates a new <code>BufWriter</code> with the specified buffer capacity.\nCreates a new <code>LineWriter</code> with the specified buffer …\nCreates a future which will write bytes from <code>buf</code> into the …\nWrite data into this object.\nCreates a future which will write bytes from <code>bufs</code> into the …\nAn RAII guard returned by the <code>MutexGuard::map</code> and …\nA futures-aware mutex.\nAn RAII guard returned by the <code>lock</code> and <code>try_lock</code> methods. …\nA future which resolves when the target mutex has been …\nAn RAII guard returned by the <code>lock_owned</code> and <code>try_lock_owned</code>…\nA future which resolves when the target mutex has been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a mutable reference to the underlying data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this mutex, returning the underlying data.\nAcquire the lock asynchronously.\nAcquire the lock asynchronously.\nReturns a locked view over a portion of the locked data.\nReturns a locked view over a portion of the locked data.\nCreates a new futures-aware mutex.\nAttempt to acquire the lock immediately.\nAttempt to acquire the lock immediately.\nA type with no possible values.\nRead bytes asynchronously.\nRead bytes asynchronously.\nSeek bytes asynchronously.\nWrite bytes asynchronously.\nThe type of value produced by the sink when an error …\nThe type of failures yielded by this future\nThe type of failures yielded by this future\nA future represents an asynchronous computation obtained …\nValues yielded by the stream.\nThe type of successful values yielded by this future\nThe type of successful values yielded by this future\nThe type of value produced on completion.\nA <code>Sink</code> is a value into which other values can be sent, …\nA stream of values produced asynchronously.\nA convenience for futures that return <code>Result</code> values that …\nA convenience for streams that return <code>Result</code> values that …\nAn extension trait which adds utility methods to <code>AsyncRead</code> …\nAn extension trait which adds utility methods to …\nAn extension trait for <code>Sink</code>s that provides a variety of …\nAn extension trait for <code>Stream</code>s that provides a variety of …\nAn extension trait for <code>Future</code>s that provides a variety of …\nAn extension trait which adds utility methods to <code>AsyncSeek</code> …\nAdapters specific to <code>Result</code>-returning streams\nAdapters specific to <code>Result</code>-returning futures\nAn extension trait which adds utility methods to <code>AsyncWrite</code>…\nExecute predicate over asynchronous stream, and return <code>true</code>…\nExecutes another future after this one resolves …\nChain on a computation for when a value is ready, passing …\nExecute predicate over asynchronous stream, and return <code>true</code>…\nWrap the future in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nWrap the future in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nAdds a fixed-size buffer to the current sink.\nAn adaptor for creating a buffered list of pending futures …\nAn adaptor for creating a buffered list of pending futures.\nBorrows a stream, rather than consuming it.\nCatches unwinding panics while polling the future.\nCatches unwinding panics while polling the stream.\nAdapter for chaining two streams.\nCreates an adaptor which will chain this stream with …\nAn adaptor for chunking up items of the stream inside a …\nClose the sink.\nCreates a future which will entirely close this <code>AsyncWrite</code>.\nTransforms a stream into a collection, returning a future …\nConcatenate all items of a stream into a single extendable …\nTells this buffer that <code>amt</code> bytes have been consumed from …\nA convenience for calling <code>AsyncBufRead::consume</code> on <code>Unpin</code> …\nDrives the stream to completion, counting the number of …\nRepeats a stream endlessly.\nCreates a stream which gives the current iteration count …\nMaps this future’s <code>Error</code> to a new error type using the …\nWraps the current stream in a new stream which converts …\nFanout items to multiple sinks.\nA future that completes after the given item has been …\nCreates a future which will wait for a non-empty buffer to …\nFilters the values produced by this stream according to …\nFilters the values produced by this stream while …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nFlatten the execution of this future when the output of …\nFlattens a stream of streams into just one continuous …\nFlattens the execution of this future when the successful …\nFlatten the execution of this future when the successful …\nFlattens a stream of streams into just one continuous …\nFlush the sink, processing all pending items.\nCreates a future which will entirely flush this <code>AsyncWrite</code>.\nExecute an accumulating asynchronous computation over a …\nRuns this stream to completion, executing the provided …\nRuns this stream to completion, executing the provided …\nA future that completes after the given stream has been …\nFuse a future such that <code>poll</code> will never again be called …\nFuse a stream such that <code>poll_next</code> will never again be …\nAsynchronous values.\nDo something with the output of a future before passing it …\nDo something with each item of this stream, afterwards …\nDo something with the error value of a future before …\nDo something with the error value of this stream, …\nDo something with the success value of a future before …\nDo something with the success value of this stream, …\nAdapter that converts this stream into an <code>AsyncBufRead</code>.\nWraps a <code>TryFuture</code> into a type that implements <code>Future</code>.\nConverts this stream into a future of …\nAllow using an <code>AsyncWrite</code> as a <code>Sink</code><code>&lt;Item: AsRef&lt;[u8]&gt;&gt;</code>.\nConvert this future into a single element stream.\nWraps a <code>TryStream</code> into a type that implements <code>Stream</code>\nWrap this future in an <code>Either</code> future, making it the …\nWrap this sink in an <code>Either</code> sink, making it the left-hand …\nWrap this stream in an <code>Either</code> stream, making it the …\nReturns a stream over the lines of this reader. This …\nMap this future’s output to a different type, returning …\nMaps this stream’s items to a different type, returning …\nMaps this future’s error value to a different value.\nWraps the current stream in a new stream which maps the …\nMap this future’s output to a different type, returning …\nMaps this future’s success value to a different value.\nWraps the current stream in a new stream which maps the …\nMaps this future’s success value to a different value, …\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nCreates a future that resolves to the next item in the …\nEvaluates and consumes the future, returning the resulting …\nMaps this future’s <code>Ok</code> to a new type using the <code>Into</code> trait.\nExecutes another future if this one resolves to an error. …\nChain on a computation for when an error happens, passing …\nCreates a new stream which exposes a <code>peek</code> method.\nAttempts to resolve the future to a final value, …\nFlush any remaining output and close this sink, if …\nAttempt to close the object.\nA convenience method for calling <code>Sink::poll_close</code> on <code>Unpin</code> …\nAttempt to return the contents of the internal buffer, …\nFlush any remaining output from this sink.\nAttempt to flush the object, ensuring that any buffered …\nA convenience method for calling <code>Sink::poll_flush</code> on <code>Unpin</code> …\nAttempt to pull out the next value of this stream, …\nA convenience method for calling <code>Stream::poll_next</code> on <code>Unpin</code>\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempts to prepare the <code>Sink</code> to receive a value.\nA convenience method for calling <code>Sink::poll_ready</code> on <code>Unpin</code> …\nAttempt to seek to an offset, in bytes, in a stream.\nA convenience for calling <code>Future::poll</code> on <code>Unpin</code> future …\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nTries to read some bytes directly into the given <code>buf</code> in …\nCreates a future which will read exactly enough bytes to …\nCreates a future which will read all the bytes associated …\nCreates a future which will read all the bytes from this …\nCreates a future which will read all the bytes from this …\nCreates a future which will read all the bytes associated …\nCreates a future which will read from the <code>AsyncRead</code> into …\nAn adaptor for chunking up ready items of the stream …\nTurn this future into a future that yields <code>()</code> on …\nWrap this future in an <code>Either</code> future, making it the …\nWrap this stream in an <code>Either</code> stream, making it the …\nWrap this stream in an <code>Either</code> stream, making it the …\nCombinator similar to <code>StreamExt::fold</code> that holds internal …\nCreates a future which will seek an IO object, and then …\nReturns a <code>Future</code> that resolves when the next item in this …\nA future that completes after the given item has been …\nA future that completes after the given stream has been …\nCreate a cloneable handle to this future where all handles …\nAsynchronous sinks.\nMap this sink’s error to a different error type using …\nTransforms the error returned by the sink.\nReturns the bounds on the remaining length of the stream.\nCreates a new stream which skips <code>n</code> items of the underlying …\nSkip elements on this stream while the provided …\nSplits this <code>Stream + Sink</code> object into separate <code>Sink</code> and …\nHelper method for splitting this read/write object into …\nBegin the process of sending a value to the sink. Each …\nA convenience method for calling <code>Sink::start_send</code> on <code>Unpin</code> …\nAsynchronous streams.\nCreates a future which will return the current seek …\nCreates a new stream of at most <code>n</code> items of the underlying …\nCreates an AsyncRead adapter which will read at most <code>limit</code> …\nTake elements from this stream until the provided future …\nTake elements from this stream while the provided …\nChain on a computation for when a future finished, passing …\nComputes from this stream’s items new items of a …\nAttempt to execute a predicate over an asynchronous stream …\nAttempt to execute a predicate over an asynchronous stream …\nAttempt to execute several futures from a stream …\nAttempt to execute several futures from a stream …\nAn adaptor for chunking up successful items of the stream …\nAttempt to transform a stream into a collection, returning …\nAttempt to concatenate all items of a stream into a single …\nAttempt to filter the values produced by this stream …\nAttempt to filter the values produced by this stream while …\nFlatten the execution of this future when the successful …\nFlattens a stream of streams into just one continuous …\nFlatten the execution of this future when the successful …\nFlattens a stream of streams into just one continuous …\nAttempt to execute an accumulating asynchronous …\nAttempts to run this stream to completion, executing the …\nAttempts to run this stream to completion, executing the …\nCreates a future that attempts to resolve the next item in …\nPoll this <code>TryFuture</code> as if it were a <code>Future</code>.\nPoll this <code>TryStream</code> as if it were a <code>Stream</code>.\nA convenience method for calling <code>TryStream::try_poll_next</code> …\nA convenience method for calling <code>TryFuture::try_poll</code> on …\nAn adaptor for chunking up successful, ready items of the …\nSkip elements on this stream while the provided …\nTake elements on this stream while the provided …\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nUnwraps this future’s output, producing a future with …\nConverts a stream of pairs into a future, which resolves …\nComposes a function <em>in front of</em> the sink.\nComposes a function <em>in front of</em> the sink.\nCreates a future which will write bytes from <code>buf</code> into the …\nWrite data into this object.\nCreates a future which will write bytes from <code>bufs</code> into the …\nAn adapter for zipping two streams together.\nA handle to an <code>Abortable</code> task.\nA registration handle for an <code>Abortable</code> task. Values of …\nA future/stream which can be remotely short-circuited …\nIndicator that the <code>Abortable</code> task was aborted.\nFuture for the <code>and_then</code> method.\nAn owned dynamically typed <code>Future</code> for use in cases where …\nFuture for the <code>catch_unwind</code> method.\nThe output of the completed future\nThe output of the completed future\nCombines two different futures, streams, or sinks having …\nFuture for the <code>err_into</code> method.\nThe type of failures yielded by this future\nFuture for the <code>flatten</code> method.\nSink for the <code>flatten_sink</code> method.\nStream for the <code>flatten_stream</code> method.\nFuture for the <code>fuse</code> method.\nA future which tracks whether or not the underlying future …\nA future represents an asynchronous computation obtained …\nA not-yet-completed future\nA not-yet-completed future\nAn extension trait for <code>Future</code>s that provides a variety of …\nA custom trait object for polling futures, roughly akin to …\nThe empty variant after the result of a <code>MaybeDone</code> has been …\nThe empty variant after the result of a <code>TryMaybeDone</code> has …\nFuture for the <code>inspect</code> method.\nFuture for the <code>inspect_err</code> method.\nFuture for the <code>inspect_ok</code> method.\nFuture for the <code>into_future</code> method.\nStream for the <code>into_stream</code> method.\nFuture for the <code>join</code> function.\nFuture for the <code>join3</code> function.\nFuture for the <code>join4</code> function.\nFuture for the <code>join5</code> function.\nFuture for the <code>join_all</code> function.\nFuture for the <code>lazy</code> function.\nFirst branch of the type\n<code>BoxFuture</code>, but without the <code>Send</code> requirement.\nA custom trait object for polling futures, roughly akin to …\nFuture for the <code>map</code> method.\nFuture for the <code>map_err</code> method.\nFuture for the <code>map_into</code> combinator.\nFuture for the <code>map_ok</code> method.\nFuture for the <code>map_ok_or_else</code> method.\nA future that may have completed.\nFuture for the <code>never_error</code> combinator.\nThe type of successful values yielded by this future\nFuture for the <code>ok_into</code> method.\nA future representing a value which may or may not be …\nFuture for the <code>or_else</code> method.\nThe type of value produced on completion.\nFuture for the <code>pending()</code> function.\nFuture for the <code>poll_fn</code> function.\nFuture for the <code>poll_immediate</code> function.\nFuture for the <code>ready</code> function.\nA future which sends its output to the corresponding …\nThe handle to a remote future returned by <code>remote_handle</code>. …\nSecond branch of the type\nFuture for the <code>select()</code> function.\nFuture for the <code>select_all</code> function.\nFuture for the <code>select_ok</code> function.\nFuture for the <code>shared</code> method.\nFuture for the <code>then</code> method.\nFuture for the <code>try_flatten</code> method.\nFuture for the <code>try_flatten_stream</code> method.\nA convenience for futures that return <code>Result</code> values that …\nAdapters specific to <code>Result</code>-returning futures\nFuture for the <code>try_join</code> function.\nFuture for the <code>try_join3</code> function.\nFuture for the <code>try_join4</code> function.\nFuture for the <code>try_join5</code> function.\nFuture for the <code>try_join_all</code> function.\nA future that may have completed with an error.\nFuture for the <code>try_select()</code> function.\nFuture for the <code>unit_error</code> combinator.\nA custom implementation of a future trait object for …\nFuture for the <code>unwrap_or_else</code> method.\nA weak reference to a <code>Shared</code> that can be upgraded much …\nCreates a new <code>Abortable</code> future and an <code>AbortHandle</code> which …\nExecutes another future after this one resolves …\nConvert <code>Pin&lt;&amp;mut Either&lt;A, B&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;A, B&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;A&gt;, Pin&lt;&amp;B&gt;&gt;</code>, …\nWrap the future in a Box, pinning it.\nWrap the future in a Box, pinning it.\nCatches unwinding panics while polling the future.\nCreates a new <code>WeakShared</code> for this <code>Shared</code>.\nDrops the future represented by the given fat pointer.\nCreate a future that is immediately ready with an error …\nMaps this future’s <code>Error</code> to a new error type using the …\nFactor out a homogeneous type from an either of pairs.\nFactor out a homogeneous type from an either of pairs.\nFlatten the execution of this future when the output of …\nFlattens the execution of this future when the successful …\nFlatten the execution of this future when the successful …\nDrops this handle <em>without</em> canceling the underlying future.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuse a future such that <code>poll</code> will never again be called …\nDo something with the output of a future before passing it …\nDo something with the error value of a future before …\nDo something with the success value of a future before …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWraps a <code>TryFuture</code> into a type that implements <code>Future</code>.\nUnwraps the value from this immediately ready future.\nConsumes this combinator, returning the underlying futures.\nExtract the value of an either over two equivalent types.\nConvert an owned instance into a (conceptually owned) fat …\nConvert this future into a single element stream.\nReturns <code>true</code> if the underlying future should no longer be …\nJoins the result of two futures, waiting for them both to …\nSame as <code>join</code>, but with more futures.\nSame as <code>join</code>, but with more futures.\nSame as <code>join</code>, but with more futures.\nCreates a future which represents a collection of the …\nCreates a new future that allows delayed execution of a …\nWrap this future in an <code>Either</code> future, making it the …\nMap this future’s output to a different type, returning …\nMaps this future’s error value to a different value.\nMap this future’s output to a different type, returning …\nMaps this future’s success value to a different value.\nMaps this future’s success value to a different value, …\nWraps a future into a <code>MaybeDone</code>\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nEvaluates and consumes the future, returning the resulting …\nCreate a future that is immediately ready with a success …\nMaps this future’s <code>Ok</code> to a new type using the <code>Into</code> trait.\nExecutes another future if this one resolves to an error. …\nReturns an <code>Option</code> containing a mutable reference to the …\nReturns an <code>Option</code> containing a mutable reference to the …\nReturns <code>Some</code> containing a reference to this <code>Shared</code>’s …\nCreates a future which never resolves, representing a …\nAttempts to resolve the future to a final value, …\nCreates a new future wrapping around a function returning …\nCreates a future that is immediately ready with an Option …\nA convenience for calling <code>Future::poll</code> on <code>Unpin</code> future …\nReturns <code>true</code> if the two <code>Shared</code>s point to the same future …\nHashes the internal state of this <code>Shared</code> in a way that’s …\nCreates a future that is immediately ready with a value.\nTurn this future into a future that yields <code>()</code> on …\nWrap this future in an <code>Either</code> future, making it the …\nWaits for either one of two differently-typed futures to …\nCreates a new future which will select over a list of …\nCreates a new future which will select the first …\nCreate a cloneable handle to this future where all handles …\nGets the number of strong pointers to this allocation.\nAttempt to take the output of a <code>MaybeDone</code> without driving …\nAttempt to take the output of a <code>TryMaybeDone</code> without …\nCreates a new <code>Fuse</code>-wrapped future which is already …\nChain on a computation for when a future finished, passing …\nFlatten the execution of this future when the successful …\nFlatten the execution of this future when the successful …\nJoins the result of two futures, waiting for them both to …\nSame as <code>try_join</code>, but with more futures.\nSame as <code>try_join</code>, but with more futures.\nSame as <code>try_join</code>, but with more futures.\nCreates a future which represents either a collection of …\nWraps a future into a <code>TryMaybeDone</code>\nPoll this <code>TryFuture</code> as if it were a <code>Future</code>.\nA convenience method for calling <code>TryFuture::try_poll</code> on …\nWaits for either one of two differently-typed futures to …\nTurns a <code>Future&lt;Output = T&gt;</code> into a …\nUnwraps this future’s output, producing a future with …\nAttempts to upgrade this <code>WeakShared</code> into a <code>Shared</code>.\nGets the number of weak pointers to this allocation.\nSink for the <code>buffer</code> method.\nFuture for the <code>close</code> method.\nSink for the <code>drain</code> function.\nThe type of value produced by the sink when an error …\nSink that clones incoming items and forwards them to two …\nFuture for the <code>feed</code> method.\nFuture for the <code>flush</code> method.\nFuture for the <code>send</code> method.\nFuture for the <code>send_all</code> method.\nA <code>Sink</code> is a value into which other values can be sent, …\nSink for the <code>sink_err_into</code> method.\nAn extension trait for <code>Sink</code>s that provides a variety of …\nSink for the <code>sink_map_err</code> method.\nSink for the <code>unfold</code> function.\nSink for the <code>with</code> method.\nSink for the <code>with_flat_map</code> method.\nAdds a fixed-size buffer to the current sink.\nClose the sink.\nCreate a sink that will just discard all items given to it.\nFanout items to multiple sinks.\nA future that completes after the given item has been …\nFlush the sink, processing all pending items.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner sinks.\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nGet a pinned mutable reference to the inner sinks.\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nGet a shared reference to the inner sinks.\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this combinator, returning the underlying sinks.\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nWrap this sink in an <code>Either</code> sink, making it the left-hand …\nFlush any remaining output and close this sink, if …\nA convenience method for calling <code>Sink::poll_close</code> on <code>Unpin</code> …\nFlush any remaining output from this sink.\nA convenience method for calling <code>Sink::poll_flush</code> on <code>Unpin</code> …\nAttempts to prepare the <code>Sink</code> to receive a value.\nA convenience method for calling <code>Sink::poll_ready</code> on <code>Unpin</code> …\nWrap this stream in an <code>Either</code> stream, making it the …\nA future that completes after the given item has been …\nA future that completes after the given stream has been …\nMap this sink’s error to a different error type using …\nTransforms the error returned by the sink.\nBegin the process of sending a value to the sink. Each …\nA convenience method for calling <code>Sink::start_send</code> on <code>Unpin</code> …\nCreate a sink from a function which processes one item at …\nComposes a function <em>in front of</em> the sink.\nComposes a function <em>in front of</em> the sink.\nA handle to an <code>Abortable</code> task.\nA registration handle for an <code>Abortable</code> task. Values of …\nA future/stream which can be remotely short-circuited …\nIndicator that the <code>Abortable</code> task was aborted.\nFuture for the <code>all</code> method.\nStream for the <code>and_then</code> method.\nFuture for the <code>any</code> method.\nAn owned dynamically typed <code>Stream</code> for use in cases where …\nStream for the <code>buffer_unordered</code> method.\nStream for the <code>buffered</code> method.\nStream for the <code>catch_unwind</code> method.\nStream for the <code>chain</code> method.\nStream for the <code>chunks</code> method.\nFuture for the <code>collect</code> method.\nFuture for the <code>concat</code> method.\nFuture for the <code>count</code> method.\nStream for the <code>cycle</code> method.\nStream for the <code>empty</code> function.\nStream for the <code>enumerate</code> method.\nStream for the <code>err_into</code> method.\nThe type of failures yielded by this future\nStream for the <code>filter</code> method.\nStream for the <code>filter_map</code> method.\nStream for the <code>flat_map</code> method.\nStream for the <code>flat_map_unordered</code> method.\nStream for the <code>flatten</code> method.\nStream for the <code>flatten_unordered</code> method.\nFuture for the <code>fold</code> method.\nFuture for the <code>for_each</code> method.\nFuture for the <code>for_each_concurrent</code> method.\nFuture for the <code>forward</code> method.\nStream for the <code>fuse</code> method.\nA stream which tracks whether or not the underlying stream …\nAn unbounded queue of futures.\nA set of futures which may complete in any order.\nStream for the <code>inspect</code> method.\nStream for the <code>inspect_err</code> method.\nStream for the <code>inspect_ok</code> method.\nReader for the <code>into_async_read</code> method.\nStream for the <code>into_stream</code> method.\nValues yielded by the stream.\nStream for the <code>iter</code> function.\nPoll the first stream.\n<code>BoxStream</code>, but without the <code>Send</code> requirement.\nStream for the <code>map</code> method.\nStream for the <code>map_err</code> method.\nStream for the <code>map_ok</code> method.\nFuture for the <code>next</code> method.\nFuture for the <code>Peekable::next_if</code> method.\nFuture for the <code>Peekable::next_if_eq</code> method.\nThe type of successful values yielded by this future\nA stream which emits single element and then EOF.\nStream for the <code>or_else</code> method.\nFuture for the <code>Peekable::peek</code> method.\nFuture for the <code>Peekable::peek_mut</code> method.\nA <code>Stream</code> that implements a <code>peek</code> method.\nStream for the <code>pending()</code> function.\nStream for the <code>poll_fn</code> function.\nStream for the poll_immediate function.\nType to tell <code>SelectWithStrategy</code> which stream to poll next.\nStream for the <code>ready_chunks</code> method.\nStream for the <code>repeat</code> function.\nAn stream that repeats elements of type <code>A</code> endlessly by …\nError indicating a <code>SplitSink&lt;S&gt;</code> and <code>SplitStream&lt;S&gt;</code> were …\nPoll the second stream.\nStream for the <code>scan</code> method.\nStream for the <code>select()</code> function.\nAn unbounded set of streams\nFuture for the <code>select_next_some</code> method.\nStream for the <code>select_with_strategy()</code> function. See …\nStream for the <code>skip</code> method.\nStream for the <code>skip_while</code> method.\nA <code>Sink</code> part of the split pair\nA <code>Stream</code> part of the split pair\nA stream of values produced asynchronously.\nAn extension trait for <code>Stream</code>s that provides a variety of …\nFuture for the <code>into_future</code> method.\nStream for the <code>take</code> method.\nStream for the <code>take_until</code> method.\nStream for the <code>take_while</code> method.\nStream for the <code>then</code> method.\nFuture for the <code>try_all</code> method.\nFuture for the <code>try_any</code> method.\nStream for the <code>try_buffer_unordered</code> method.\nStream for the <code>try_buffered</code> method.\nStream for the <code>try_chunks</code> method.\nError indicating, that while chunk was collected inner …\nFuture for the <code>try_collect</code> method.\nFuture for the <code>try_concat</code> method.\nStream for the <code>try_filter</code> method.\nStream for the <code>try_filter_map</code> method.\nStream for the <code>try_flatten</code> method.\nStream for the <code>try_flatten_unordered</code> method.\nFuture for the <code>try_fold</code> method.\nFuture for the <code>try_for_each</code> method.\nFuture for the <code>try_for_each_concurrent</code> method.\nFuture for the <code>try_next</code> method.\nStream for the <code>try_ready_chunks</code> method.\nError indicating, that while chunk was collected inner …\nStream for the <code>try_skip_while</code> method.\nA convenience for streams that return <code>Result</code> values that …\nAdapters specific to <code>Result</code>-returning streams\nStream for the <code>try_take_while</code> method.\nStream for the <code>try_unfold</code> function.\nStream for the <code>unfold</code> function.\nFuture for the <code>unzip</code> method.\nStream for the <code>zip</code> method.\nAbort the <code>Abortable</code> stream/future associated with this …\nCreates a new <code>Abortable</code> stream and an <code>AbortHandle</code> which …\nExecute predicate over asynchronous stream, and return <code>true</code>…\nChain on a computation for when a value is ready, passing …\nExecute predicate over asynchronous stream, and return <code>true</code>…\nWrap the stream in a Box, pinning it.\nWrap the stream in a Box, pinning it.\nAn adaptor for creating a buffered list of pending futures …\nAn adaptor for creating a buffered list of pending futures.\nBorrows a stream, rather than consuming it.\nCatches unwinding panics while polling the stream.\nAdapter for chaining two streams.\nAn adaptor for chunking up items of the stream inside a …\nClears the set, removing all futures.\nClears the set, removing all streams.\nTransforms a stream into a collection, returning a future …\nConcatenate all items of a stream into a single extendable …\nDrives the stream to completion, counting the number of …\nRepeats a stream endlessly.\nCreates a stream which contains no elements.\nCreates a stream which gives the current iteration count …\nWraps the current stream in a new stream which converts …\nFilters the values produced by this stream according to …\nFilters the values produced by this stream while …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nMaps a stream like <code>StreamExt::map</code> but flattens nested …\nFlattens a stream of streams into just one continuous …\nFlattens a stream of streams into just one continuous …\nExecute an accumulating asynchronous computation over a …\nRuns this stream to completion, executing the provided …\nRuns this stream to completion, executing the provided …\nA future that completes after the given stream has been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuse a stream such that <code>poll_next</code> will never again be …\nAn unbounded set of futures.\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying stream that …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying streams …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying sink or …\nAcquires a mutable reference to the underlying streams …\nAcquires a mutable reference to the underlying streams …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying sink …\nAcquires a pinned mutable reference to the underlying …\nAcquires a pinned mutable reference to the underlying …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying stream that this …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying streams that this …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying sink or stream that …\nAcquires a reference to the underlying streams that this …\nAcquires a reference to the underlying streams that this …\nCreate an <code>AbortHandle</code> from the given <code>AbortRegistration</code>.\nDo something with each item of this stream, afterwards …\nDo something with the error value of this stream, …\nDo something with the success value of this stream, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdapter that converts this stream into an <code>AsyncBufRead</code>.\nConverts this stream into a future of …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying stream.\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying streams.\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying sink or …\nConsumes this combinator, returning the underlying streams.\nConsumes this combinator, returning the underlying streams.\nWraps a <code>TryStream</code> into a type that implements <code>Stream</code>\nChecks whether the task has been aborted. Note that all …\nChecks whether <code>AbortHandle::abort</code> was <em>called</em> on any …\nReturns whether the underlying stream has finished or not.\nReturns <code>true</code> if the queue contains no futures\nReturns <code>true</code> if the set contains no futures.\nReturns <code>true</code> if the set contains no streams\nReturns <code>true</code> if the <code>SplitStream&lt;S&gt;</code> and <code>SplitSink&lt;S&gt;</code> …\nReturns <code>true</code> if the <code>SplitStream&lt;S&gt;</code> and <code>SplitSink&lt;S&gt;</code> …\nWhether the stream was stopped yet by the stopping future …\nReturns <code>true</code> if the stream should no longer be polled.\nConverts an <code>Iterator</code> into a <code>Stream</code> which is always ready …\nReturns an iterator that allows inspecting each future in …\nReturns an iterator that allows inspecting each stream in …\nReturns an iterator that allows modifying each future in …\nReturns an iterator that allows modifying each stream in …\nReturns an iterator that allows modifying each future in …\nReturns an iterator that allows inspecting each future in …\nWrap this stream in an <code>Either</code> stream, making it the …\nReturns the number of futures contained in the queue.\nReturns the number of futures contained in the set.\nReturns the number of streams contained in the set.\nMaps this stream’s items to a different type, returning …\nWraps the current stream in a new stream which maps the …\nWraps the current stream in a new stream which maps the …\nConstructs a new, empty <code>FuturesOrdered</code>\nConstructs a new, empty <code>FuturesUnordered</code>.\nConstructs a new, empty <code>SelectAll</code>\nCreates a new <code>Abortable</code> future/stream using an existing …\nCreates an (<code>AbortHandle</code>, <code>AbortRegistration</code>) pair which can …\nCreates a future that resolves to the next item in the …\nCreates a future which will consume and return the next …\nCreates a future which will consume and return the next …\nCreates a stream of a single element.\nChain on a computation for when an error happens, passing …\nProduces a future which retrieves a reference to the next …\nProduces a future which retrieves a mutable reference to …\nCreates a new stream which exposes a <code>peek</code> method.\nCreates a stream which never returns any elements.\nCreates a new stream wrapping a function returning …\nCreates a new stream that always immediately returns …\nAttempt to pull out the next value of this stream, …\nA convenience method for calling <code>Stream::poll_next</code> on <code>Unpin</code>\nPeek retrieves a reference to the next item in the stream.\nPeek retrieves a mutable reference to the next item in the …\nPush a future into the queue.\nPush a future into the set.\nPush a stream into the set.\nPushes a future to the back of the queue.\nPushes a future to the front of the queue.\nAn adaptor for chunking up ready items of the stream …\nCreate a stream which produces the same item repeatedly.\nCreates a new stream that repeats elements of type <code>A</code> …\nAttempts to put the two “halves” of a split …\nAttempts to put the two “halves” of a split …\nWrap this stream in an <code>Either</code> stream, making it the …\nCombinator similar to <code>StreamExt::fold</code> that holds internal …\nThis function will attempt to pull items from both …\nAn unbounded set of streams\nConvert a list of streams into a <code>Stream</code> of results from …\nReturns a <code>Future</code> that resolves when the next item in this …\nThis function will attempt to pull items from both …\nReturns the bounds on the remaining length of the stream.\nCreates a new stream which skips <code>n</code> items of the underlying …\nSkip elements on this stream while the provided …\nSplits this <code>Stream + Sink</code> object into separate <code>Sink</code> and …\nCreates a new stream of at most <code>n</code> items of the underlying …\nExtract the stopping future out of the combinator. The …\nOnce the stopping future is resolved, this method can be …\nTake elements from this stream until the provided future …\nTake elements from this stream while the provided …\nComputes from this stream’s items new items of a …\nToggle the value and return the old one.\nAttempt to execute a predicate over an asynchronous stream …\nAttempt to execute a predicate over an asynchronous stream …\nAttempt to execute several futures from a stream …\nAttempt to execute several futures from a stream …\nAn adaptor for chunking up successful items of the stream …\nAttempt to transform a stream into a collection, returning …\nAttempt to concatenate all items of a stream into a single …\nAttempt to filter the values produced by this stream …\nAttempt to filter the values produced by this stream while …\nFlattens a stream of streams into just one continuous …\nFlattens a stream of streams into just one continuous …\nAttempt to execute an accumulating asynchronous …\nAttempts to run this stream to completion, executing the …\nAttempts to run this stream to completion, executing the …\nCreates a future that attempts to resolve the next item in …\nPoll this <code>TryStream</code> as if it were a <code>Stream</code>.\nA convenience method for calling <code>TryStream::try_poll_next</code> …\nAn adaptor for chunking up successful, ready items of the …\nSkip elements on this stream while the provided …\nTake elements on this stream while the provided …\nCreates a <code>TryStream</code> from a seed and a closure returning a …\nCreates a <code>Stream</code> from a seed and a closure returning a …\nConverts a stream of pairs into a future, which resolves …\nAn adapter for zipping two streams together.\nA set of futures which may complete in any order.\nOwned iterator over all futures in the unordered set.\nImmutable iterator over all the futures in the unordered …\nMutable iterator over all futures in the unordered set.\nMutable iterator over all futures in the unordered set.\nImmutable iterator over all futures in the unordered set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOwned iterator over all streams in the unordered set.\nImmutable iterator over all streams in the unordered set.\nMutable iterator over all streams in the unordered set.\nAn unbounded set of streams\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a list of streams into a <code>Stream</code> of results from …\nA way of waking up a specific task.\nA synchronization primitive for task wakeup.\nThe context of an asynchronous task.\nA custom trait object for polling futures, roughly akin to …\nA custom trait object for polling futures, roughly akin to …\nThe <code>LocalSpawn</code> is similar to <code>Spawn</code>, but allows spawning …\nExtension trait for <code>LocalSpawn</code>.\nRepresents that a value is not ready yet.\nIndicates whether a value is available or if the current …\nA <code>RawWaker</code> allows the implementor of a task executor to …\nA virtual function pointer table (vtable) that specifies …\nRepresents that a value is immediately ready.\nThe <code>Spawn</code> trait allows for pushing futures onto an …\nAn error that occurred during spawning.\nExtension trait for <code>Spawn</code>.\nA custom implementation of a future trait object for …\nA <code>Waker</code> is a handle for waking up a task by notifying its …\nA <code>Waker</code> that is only valid for a given lifetime.\nAssigns a clone of <code>source</code> to <code>self</code>, unless …\nGets the <code>data</code> pointer used to create this <code>Waker</code>.\nDrops the future represented by the given fat pointer.\nReturns a reference to the extension data for the current …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUse a <code>Wake</code>-able type as a <code>Waker</code>.\nReturns the argument unchanged.\nMoves the value into a <code>Poll::Ready</code> to make a <code>Poll&lt;T&gt;</code>.\nReturns the argument unchanged.\nUse a <code>Wake</code>-able type as a <code>RawWaker</code>.\nUse a <code>Wake</code>-able type as a <code>RawWaker</code>.\nReturns the argument unchanged.\nCreates a new <code>Waker</code> from <code>RawWaker</code>.\nCreates a new <code>Context</code> from a <code>&amp;Waker</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the <code>LocalFutureObj</code> into a <code>FutureObj</code>.\nConvert an owned instance into a (conceptually owned) fat …\nReturns <code>true</code> if the poll is a <code>Pending</code> value.\nReturns <code>true</code> if the poll is a <code>Poll::Ready</code> value.\nCheck whether spawning failed to the executor being shut …\nReturns a reference to the <code>LocalWaker</code> for the current task.\nMaps a <code>Poll&lt;T&gt;</code> to <code>Poll&lt;U&gt;</code> by applying a function to a …\nMaps a <code>Poll::Ready&lt;Result&lt;T, E&gt;&gt;</code> to …\nMaps a <code>Poll::Ready&lt;Option&lt;Result&lt;T, E&gt;&gt;&gt;</code> to …\nMaps a <code>Poll&lt;Result&lt;T, E&gt;&gt;</code> to <code>Poll&lt;Result&lt;U, E&gt;&gt;</code> by …\nMaps a <code>Poll&lt;Option&lt;Result&lt;T, E&gt;&gt;&gt;</code> to …\nCreate a <code>LocalFutureObj</code> from a custom trait object …\nCreate an <code>AtomicWaker</code>.\nCreate a <code>FutureObj</code> from a custom trait object …\nCreate a new <code>WakerRef</code> from a <code>Waker</code> reference.\nCreates a new <code>Waker</code> from the provided <code>data</code> pointer and …\nCreates a new <code>RawWaker</code> from the provided <code>data</code> pointer and …\nCreates a new <code>RawWakerVTable</code> from the provided <code>clone</code>, <code>wake</code>,\nCreate a new <code>WakerRef</code> from a <code>Waker</code> that must not be …\nReturns a reference to a <code>Waker</code> that does nothing when used.\nCreate a new <code>Waker</code> which does nothing when <code>wake()</code> is …\nGet a static reference to a <code>Waker</code> which does nothing when …\nRegisters the waker to be notified on calls to <code>wake</code>.\nSpawning failed because the executor has been shut down.\nSpawns a task that polls the given future with output <code>()</code> to\nSpawns a task that polls the given future with output <code>()</code> to\nSpawns a future that will be run to completion.\nSpawns a task that polls the given future to completion …\nSpawns a future that will be run to completion.\nSpawns a task that polls the given future to completion …\nDetermines whether the executor is able to spawn new tasks.\nDetermines whether the executor is able to spawn new tasks.\nReturns the last <code>Waker</code> passed to <code>register</code>, so that the …\nGets the <code>vtable</code> pointer used to create this <code>Waker</code>.\nIndicates that the associated task is ready to make …\nCalls <code>wake</code> on the last <code>Waker</code> passed to <code>register</code>.\nWakes up the task associated with this <code>Waker</code>.\nIndicates that the associated task is ready to make …\nWakes up the task associated with this <code>Waker</code> without …\nCreates a <code>Waker</code> from an <code>Arc&lt;impl ArcWake&gt;</code>.\nReturns a reference to the <code>Waker</code> for the current task.\nCreates a reference to a <code>Waker</code> from a reference to …\nReturns <code>true</code> if this <code>Waker</code> and another <code>Waker</code> would awake …\nActivity data of the current user.\nThere was an error building a URL.\nIndicates that the client is to send a member chunk …\nDiscord docs.\nIndicates that the client is to close with the given …\nThe connection closed, potentially uncleanly.\nNewtype around a callback that will be called on every …\nIndicator that the <code>Shard</code> is normally connected and is not …\nIndicator that the <code>Shard</code> is connecting and is in, e.g., a …\nIndicates the current connection stage of a <code>Shard</code>.\nWhen disallowed gateway intents are provided.\nIndicator that the <code>Shard</code> is fully disconnected and is not …\nExpected a Hello during a handshake\nAn error that occurred while attempting to deal with the …\nIndicator that the <code>Shard</code> is currently initiating a …\nWhen there was an error sending a heartbeat.\nIndicator that the <code>Shard</code> has sent an IDENTIFY packet and …\nWhen invalid authentication (a bad token) was sent in the …\nWhen undocumented gateway intents are provided.\nExpected a Ready or an InvalidateSession\nWhen invalid sharding data was sent in the IDENTIFY.\nIndicates that the client is to send a custom WebSocket …\nWhen no authentication was sent in the IDENTIFY.\nWhen a session Id was expected (for resuming), but was not …\nReturns all members of the guilds specified. Requires …\nWhen a shard would have too many guilds assigned to it.\nPresence data of the current user.\nA common username prefix filter for the members returned.\nFailed to reconnect after a number of attempts.\nThe type of reconnection that should be performed.\nIndicator that a new connection should be made by sending …\nIndicator that a shard should be restarted.\nIndicator that a new connection should be made by sending …\nIndicator that the <code>Shard</code> has sent a RESUME packet and is …\nIndicates that the client is to update the shard’s …\nIndicates that the client is to update the shard’s …\nIndicates that the client is to update the shard’s …\nA Shard is a higher-level handler for a websocket …\nA manager for handling the status of shards by starting …\nA handle to a <code>ShardRunner</code>.\nThe shard queuer is a simple loop that runs indefinitely …\nA message to be sent to the <code>ShardQueuer</code>.\nA runner for managing a <code>Shard</code> and its respective WebSocket …\nInformation about a <code>ShardRunner</code>.\nA message to send from a shard over a WebSocket.\nOptions to be passed to <code>ShardRunner::new</code>.\nAn event denoting that a shard’s connection stage was …\nIndicator that a shard should be fully shutdown without …\nMessage to shutdown the shard queuer.\nMessage to dequeue/shutdown a shard.\nMessage to start a shard, where the 0-index element is the …\nA set of exact user IDs to query for.\nThe current activity, if present\nRequests that one or multiple <code>Guild</code>s be chunked.\nA copy of <code>Client::data</code> to be given to runners for …\nDoes a heartbeat if needed. Returns false if something …\nA reference to an <code>EventHandler</code>, such as the one given to …\nA copy of the framework\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandles an event from the gateway over the receiver, …\nSends a heartbeat to the gateway with the current sequence.\nReturns the heartbeat interval dictated by Discord, if the …\nSets the shard as going into identifying stage, which sets:\nInitializes a new WebSocket client.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe type of the activity\nRetrieves the value of when the last heartbeat ack was …\nRetrieves the value of when the last heartbeat was sent.\nThe instant that a shard was last started.\nCalculates the heartbeat latency between the shard and the …\nThe latency between when a heartbeat was sent and when the …\nA copy of the <code>ShardManager</code> to communicate with it.\nThe name of the activity\nCreates a new runner for a Shard.\nInstantiates a new instance of a Shard, bypassing the …\nThe new connection stage.\nThe old connection stage.\nRetrieves the current presence of the shard.\nThe shards that are queued for booting.\nA reference to an <code>RawEventHandler</code>, such as the one given …\nBegins the shard queuer loop.\nStarts the runner’s loop to receive events.\nThe channel used to communicate with the shard runner, …\nA copy of the map of shard runners.\nThe shard runners currently managed.\nA receiver channel for the shard queuer to be told to …\nSets a callback to be called when the gateway receives the …\nThe ID of the shard that had its connection stage change.\nRetrieves a copy of the current shard information.\nPerforms a deterministic reconnect.\nAttempts to shut down the shard runner by Id.\nReturns the current connection stage of the shard.\nThe current connection stage of the shard.\nInstant of when the shard was started.\nThe state of the activity, if the type is …\nThe current online status\nThe url of the activity, if the type is …\nA copy of the URL to use to connect to the gateway.\nA filter to apply to the returned members.\nThe IDs of the <code>Guild</code> to chunk.\nThe maximum number of members to receive …\nOptional nonce to identify <code>GuildMembersChunkEvent</code> …\nUsed to specify if we want the presences of the matched …\n202 Accepted [RFC7231, Section 6.3.3]\n208 Already Reported [RFC5842]\nThe Id to get the guilds after.\nThe Id to get the users after.\nWhen an application id was expected but missing.\nFiles sent with the form as message attachments.\n502 Bad Gateway [RFC7231, Section 6.6.3]\n400 Bad Request [RFC7231, Section 6.5.1]\nThe Id to get the guilds before.\nThe Id to get the users before.\n409 Conflict [RFC7231, Section 6.5.8]\n100 Continue [RFC7231, Section 6.2.1]\n201 Created [RFC7231, Section 6.3.2]\nThis trait will be required by functions that need <code>Http</code> …\nIndicates that a route is for the <code>DELETE</code> method only.\n417 Expectation Failed [RFC7231, Section 6.5.14]\n424 Failed Dependency [RFC4918]\n403 Forbidden [RFC7231, Section 6.5.3]\n302 Found [RFC7231, Section 6.4.3]\nA file sent with the form data as an individual upload. …\n504 Gateway Timeout [RFC7231, Section 6.6.5]\n410 Gone [RFC7231, Section 6.5.9]\nIndicates that a route is for the <code>GET</code> method only.\nRepresentation of the method of a query to send for the …\n505 HTTP Version Not Supported [RFC7231, Section 6.6.6]\n<strong>Note</strong>: For all member functions that return a <code>Result</code>, the …\nA builder for the underlying <code>Http</code> client that performs …\n418 I’m a teapot [curiously not registered by IANA but …\n226 IM Used [RFC3229]\n507 Insufficient Storage [RFC4918]\n500 Internal Server Error [RFC7231, Section 6.6.1]\nHeader value contains invalid input.\nWhen using a proxy with an invalid port.\nWhen using a proxy with an invalid scheme.\nWhen parsing a Webhook fails due to invalid input.\n411 Length Required [RFC7231, Section 6.5.10]\n423 Locked [RFC4918]\n508 Loop Detected [RFC5842]\nAn method used for ratelimiting special routes.\n405 Method Not Allowed [RFC7231, Section 6.5.5]\n421 Misdirected Request RFC7540, Section 9.1.2\n301 Moved Permanently [RFC7231, Section 6.4.2]\n300 Multiple Choices [RFC7231, Section 6.4.1]\n207 Multi-Status [RFC4918]\nHolder for multipart body. Contains upload data, multipart …\n511 Network Authentication Required [RFC6585]\n203 Non-Authoritative Information [RFC7231, Section 6.3.4]\n406 Not Acceptable [RFC7231, Section 6.5.6]\n510 Not Extended [RFC2774]\n404 Not Found [RFC7231, Section 6.5.4]\n501 Not Implemented [RFC7231, Section 6.6.2]\n304 Not Modified [RFC7232, Section 4.1]\n204 No Content [RFC7231, Section 6.3.5]\n200 OK [RFC7231, Section 6.3.1]\n206 Partial Content [RFC7233, Section 4.1]\n413 Payload Too Large [RFC7231, Section 6.5.11]\n402 Payment Required [RFC7231, Section 6.5.2]\n308 Permanent Redirect [RFC7238]\n412 Precondition Failed [RFC7232, Section 4.2]\n428 Precondition Required [RFC6585]\n102 Processing [RFC2518]\n407 Proxy Authentication Required [RFC7235, Section 3.2]\nIndicates that a route is for the <code>PATCH</code> method only.\nIndicates that a route is for the <code>POST</code> method only.\nIndicates that a route is for the <code>PUT</code> method only.\n416 Range Not Satisfiable [RFC7233, Section 4.4]\n431 Request Header Fields Too Large [RFC6585]\n408 Request Timeout [RFC7231, Section 6.5.7]\n205 Reset Content [RFC7231, Section 6.3.6]\nWhen the decoding of a ratelimit header could not be …\nWhen the decoding of a ratelimit header could not be …\nA set of data containing information about the ratelimits …\nPassed to the <code>Ratelimiter::set_ratelimit_callback</code> …\nRatelimiter for requests to the Discord API.\nUsed to group requests together for ratelimiting.\nReqwest’s Error contain information on why sending a …\n303 See Other [RFC7231, Section 6.4.4]\n503 Service Unavailable [RFC7231, Section 6.6.4]\n101 Switching Protocols [RFC7231, Section 6.2.2]\nAn HTTP status code (<code>status-code</code> in RFC 7230 et al.).\n307 Temporary Redirect [RFC7231, Section 6.4.7]\n429 Too Many Requests [RFC6585]\nA struct to start typing in a <code>Channel</code> for an indefinite …\n401 Unauthorized [RFC7235, Section 3.1]\n451 Unavailable For Legal Reasons [RFC7725]\n422 Unprocessable Entity [RFC4918]\n415 Unsupported Media Type [RFC7231, Section 6.5.13]\n426 Upgrade Required [RFC7231, Section 6.5.15]\n414 URI Too Long [RFC7231, Section 6.5.12]\n305 Use Proxy [RFC7231, Section 6.4.5]\nWhen a non-successful status code was received for a …\nWhen parsing an URL failed due to invalid input.\nRepresentation of the method of a query to send for the …\n506 Variant Also Negotiates [RFC2295]\nSets the application_id to use interactions.\nReturns a &amp;str representation of the <code>StatusCode</code>\nReturns the <code>u16</code> corresponding to this <code>StatusCode</code>.\nUse the given configuration to build the <code>Http</code> client.\nGet the standardised <code>reason-phrase</code> for this status code.\nSets the <code>reqwest::Client</code>. If one isn’t provided, a …\nThe error code.\nThe error code.\nSets the <code>CreateAllowedMentions</code> used by default for each …\nThe full explained errors with their path in the request …\nMultipart text fields that are sent with the form data as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a &amp;u8 to a status code\nConverts a u16 to a status code.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if status is within 400-499.\nCheck if status is within 100-199.\nCheck if status is within 300-399.\nCheck if status is within 500-599.\nCheck if status is within 200-299.\nThe error message.\nThe error message.\nConstruct a new builder to call methods on for the HTTP …\nCreates a new ratelimiter, with a shared <code>reqwest</code> client …\nThe path to the error in the request body itself, dot …\nJSON body that will set as the form value as <code>payload_json</code>.\nErrors\nSets the proxy that Discord HTTP API requests will be …\nSets the ratelimiter to be used. If one isn’t provided, …\nSets whether or not the ratelimiter is disabled. By …\nThe routes mutex is a HashMap of each <code>RatelimitingBucket</code> …\nSets a callback to be called when a route is rate limited.\nSets a token for the bot. If the token is not prefixed “…\nRepresents a JSON array.\nRepresents a JSON boolean.\nThis type represents all possible errors that can occur …\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nRepresents a JSON string.\nCategorizes the cause of this error.\nOne-based column number at which the error was detected.\nReturns the argument unchanged.\nDeserialize an instance of type <code>T</code> from bytes of JSON text.\nDeserialize an instance of type <code>T</code> from bytes of JSON text.\nDeserialize an instance of type <code>T</code> from a string of JSON …\nInterpret a <code>Value</code> as an instance of type <code>T</code>.\nConverts a HashMap into a final <code>JsonMap</code> representation.\nCalls <code>U::from(self)</code>.\nThe kind reported by the underlying standard library I/O …\nReturns true if this error was caused by input data that …\nReturns true if this error was caused by prematurely …\nReturns true if this error was caused by a failure to read …\nReturns true if this error was caused by input that was not\nConstruct a <code>serde_json::Value</code> from a JSON literal.\nOne-based line number at which the error was detected.\nSerialize the given data structure as a String of JSON.\nSerialize the given data structure as a pretty-printed …\nConvert a <code>T</code> into a <code>Value</code> which is an enum that can …\nSerialize the given data structure as a JSON byte vector.\nSerialize the given data structure as a pretty-printed …\nWhen attempting to delete below or above the minimum or …\nAn indication that you cannot crosspost a <code>Message</code>.\nWhen attempting to edit a voice message.\nAn indication that a <code>Channel</code> could not be found by Id in …\nA utility struct to help with working with the basic …\nWhen attempting to delete a number of days’ worth of …\nWhen attempting to delete a built in nitro sticker instead …\nWhen attempting to send a message with over 10 embeds.\nIndicates that the textual content of an embed exceeds the …\nAn indication that a <code>Guild</code> could not be found by Id in the …\nIndicates that there are hierarchy problems restricting an …\nAn indicator that the <code>ChannelType</code> cannot perform an action.\nIndicates that you do not have the required permissions to …\nAn indicator that the current user cannot perform an …\nAn indicator that an item is missing from the <code>Cache</code>, and …\nAn indication that a <code>Member</code> could not be found by Id in …\nAn indication that a <code>Message</code> has already been crossposted, …\nIndicates that a <code>Message</code>s content was too long and will …\nIndicates that the current user is attempting to Direct …\nAn error returned from the <code>model</code> module.\nIndicates that the webhook name is over the 100 characters …\nIndicates that the webhook name is under the 2 characters …\nIndicates that the sticker file is missing.\nIndicates that the webhook token is missing.\nIndicates that the bot is not author of the message. This …\nA set of permissions that can be assigned to <code>User</code>s and <code>Role</code>…\nAn indication that a <code>Role</code> could not be found by Id in the …\nWhen attempting to send a message with over 3 stickers.\nIndicates that a member, role or channel from the wrong …\nModels about OAuth2 applications.\nModels relating to channels and types within channels.\nModels for user connections.\nError enum definition wrapping potential model …\nAll the events this library handles.\nReturns the argument unchanged.\nCreates a new <code>Timestamp</code> from the number of milliseconds …\nParses an RFC 3339 date and time string such as …\nCreates a new <code>Timestamp</code> from a UNIX timestamp (seconds …\nModels pertaining to the gateway.\nModels relating to guilds and types that it owns.\nA collection of newtypes defining type-strong IDs.\nCalls <code>U::from(self)</code>.\nModels for server and channel invites.\nMiscellaneous helper traits, enums, and structs for models.\nCreate a new <code>Timestamp</code> with the current date and time in …\nParse a timestamp from an RFC 3339 date and time string.\nA set of permissions for a role or user. These can be …\nThe model prelude re-exports all types in the model …\nUtilities for parsing and formatting RFC 3339 timestamps.\nParses an RFC 3339 date and time string such as …\nReturns the number of non-leap seconds since January 1, …\nUser information-related models.\nRepresentations of voice information.\nWebhook model and implementations.\nWhich permissions the bot had\nWhich permissions were required for the operation\nAn action row.\nA component which can be inside of an <code>ActionRow</code>.\nAllows your app to fetch data from a user’s “Now …\nAllows your app to update a user’s activity - requires …\nThe flags of the application.\nAllows your app to read build data for a user’s …\nAllows your app to upload/update builds for a user’s …\nAllows your app to use Slash Commands in a guild.\nAllows your app to update permissions for its commands in …\nAllows your app to update its Slash Commands via this …\nAllows your app to read entitlements for a user’s …\nAllows your app to read and update store data (SKUs, store …\nThe focused option for autocomplete interactions return by …\nFor oauth2 bots, this puts the bot in the user’s …\nA button component.\nThe style of a button.\nThe base command model that belongs to an application.\nThe command data payload.\nA set of a parameter and a value from the user.\nThe value of an <code>CommandDataOption</code>.\nThe resolved data of a command data interaction payload. …\nAn interaction when a user invokes a slash command.\nThe parameters for an <code>Command</code>.\nThe only valid values a user can pick in an <code>CommandOption</code>.\nThe type of an <code>CommandOption</code>.\nThe <code>CommandPermission</code> data.\nThe type of a <code>CommandPermission</code>.\nAn <code>Command</code> permission.\nThe type of an application command.\nAn interaction triggered by a message component.\nA message component interaction data, provided by …\nThe type of a component\nAllows <code>/users/@me/connections</code> to return linked third-party …\nInformation about the current application and its owner.\nAllows your app to see information about the user’s DMs …\nEnables <code>/users/@me</code> to return an <code>email</code> field.\nAllows your app to join users to a group dm.\nAllows <code>/users/@me/guilds</code> to return basic information about …\nAllows <code>/guilds/{guild.id}/members/{user.id}</code> to be used for …\nAllows <code>/users/@me/guilds/{guild.id}/member</code> to return a user…\nAllows <code>/users/@me</code> without <code>Self::Email</code>.\nAn input text component for modal interactions\nThe style of the input text\nSettings for the application’s default in-app …\nDiscord docs\nThe flags for an interaction response message.\nThe type of an Interaction.\nDiscord docs.\nSent when a <code>Message</code> is a response to an <code>Interaction</code>.\nFor local rpc server api access, this allows you to read …\nAn interaction triggered by a modal submit.\nA modal submit interaction data, provided by …\nPartial information about the given application.\nA ping interaction, which can only be received through an …\nAllows your app to know a user’s friends and implicit …\nThe resolved value of a <code>CommandData::target_id</code>.\nThe resolved value of a <code>CommandDataOption</code>.\nAllows your app to update a user’s connection and …\nFor local rpc server access, this allows you to control a …\nFor local rpc server api access, this allows you to …\nThe available OAuth2 Scopes.\nA select menu component.\nA select menu component options.\nInformation about the Team group of the application.\nInformation about a Member on a Team.\nVariant value is unknown.\nVariant value is unknown.\nVariant value is unknown.\nVariant value for unknown option types.\nVariant value is unknown.\nVariant value is unknown.\nVariant value is unknown.\nVariant value is unknown.\nVariant value is unknown.\nOption value variants that couldn’t be resolved by …\nAllows your app to connect to voice on user’s behalf and …\nThis generates a webhook that is returned in the oauth …\nPermissions the app or bot has within the channel the …\nPermissions the app or bot has within the channel the …\nPermissions the app or bot has within the channel the …\nThe parent application Id.\nThe id of the application the command belongs to.\nId of the application this interaction is for.\nId of the application this interaction is for.\nId of the application this interaction is for.\nId of the application this interaction is for.\nThe resolved attachments.\nChannel that the interaction was sent from.\nChannel that the interaction was sent from.\nChannel that the interaction was sent from.\nThe channel Id this interaction was sent from.\nThe channel Id this interaction was sent from.\nThe channel Id this interaction was sent from.\nIf the option is a <code>Channel</code>, it will only be able to show …\nList of channel types to include in the …\nThe resolved partial channels.\nChoices the user can pick from.\nThe components of this ActionRow.\nThe components.\nAn identifier defined by the developer for the select menu.\nDeveloper-defined identifier for the input; max 100 …\nThe custom id of the component.\nThe custom id of the modal\nThe data of the interaction which was triggered.\nThe button kind and style.\nThe data of the interaction which was triggered.\nThe data of the interaction which was triggered.\nRender this option as the default selection.\nThe default permissions required to execute the command.\nThe command description.\nThe option description.\nThe description shown for this option.\nAll localized command descriptions.\nLocalizations of the option description with locale as the …\nThe localized command description of the selected locale.\nWhether the button is disabled.\nWhether select menu is disabled.\nIndicates whether the command is available in DMs with the …\nThe emoji of this button, if there is one.\nThe emoji displayed on this option.\nFor monetized applications, any entitlements of the …\nFor monetized applications, any entitlements of the …\nFor monetized applications, any entitlements of the …\nThe flags associated with the application.\nThe command guild Id, if it is a guild command.\nThe id of the guild.\nThe guild Id this interaction was sent from, if there is …\nThe Id of the guild the command is registered to.\nThe guild Id this interaction was sent from, if there is …\nThe guild Id this interaction was sent from, if there is …\nThe guild’s preferred locale.\nThe guild’s preferred locale.\nThe guild’s preferred locale.\nThe icon of the team.\nThe command Id.\nThe id of the command.\nThe <code>RoleId</code> or <code>UserId</code>, depends on <code>kind</code> value.\nId of the interaction.\nThe Id of the invoked command.\nId of the interaction.\nThe id of the interaction.\nId of the interaction.\nId of the interaction.\nThe unique Id of the user.\nThe snowflake ID of the team.\nThe application command kind.\nThe option type.\nThe type of data this permissions applies to.\nThe application command type of the triggered application …\nAlways <code>ComponentType::ActionRow</code>\nThe component type, it will always be <code>ComponentType::Button</code>…\nThe component type, which may either be …\nThe component type, it will always be …\nType and type-specific data of this component interaction.\nThe type of the interaction.\nThe text which appears on the button.\nThe text displayed on this option.\nLabel for this component; max 45 characters. Required when …\nThe selected language of the invoking user.\nThe selected language of the invoking user.\nThe selected language of the invoking user.\nMaximum permitted length for String options\nMaximum input length for a text input; min 1, max 4000\nMaximum permitted value for Integer or Number options\nThe maximum number of selections allowed.\nThe <code>member</code> data for the invoking user.\nThe <code>member</code> data for the invoking user.\nThe member who invoked the interaction in the guild.\nThe <code>member</code> data for the invoking user.\nThe resolved partial members.\nThe members of the team\nThe member’s membership state.\nThe message this interaction was triggered by, if it is a …\nThe message this interaction was triggered by\nThe resolved messages.\nMinimum permitted length for String options\nMinimum input length for a text input; min 0, max 4000\nMinimum permitted value for Integer or Number options\nThe minimum number of selections allowed.\nThe command name.\nThe option name.\nThe choice name.\nThe name of the invoked command.\nThe name of the parameter.\nThe name of the <code>Command</code>.\nThe name of the team.\nAll localized command names.\nLocalizations of the option name with locale as the key\nLocalizations of the choice name, with locale as key\nThe localized command name of the selected locale.\nIndicates whether the command is age-restricted, defaults …\nThe parameters for the command.\nThe nested options.\nThe options of this select menu.\nThe user id of the team owner.\nWhether or not the provided data can use the command or …\nThe permissions for the command in the guild.\nThe list of permissions of the member on the team.\nThe placeholder shown when nothing is selected.\nCustom placeholder text if the input is empty; max 100 …\nWhether the parameter is optional or required.\nWhether this component is required to be filled (defaults …\nThe parameters and the given values. The converted objects …\nThe <code>TeamMemberRole</code> of the team member.\nThe application’s role connection verification entry …\nThe resolved roles.\nThe <code>InputTextStyle</code>. Required when sending modal data.\nThe targeted user or message, if the triggered application …\nThe ID of the team they are a member of.\nA continuation token for responding to the interaction.\nA continuation token for responding to the interaction.\nA continuation token for responding to the interaction.\nA continuation token for responding to the interaction.\nThe <code>user</code> object for the invoking user.\nThe <code>user</code> object for the invoking user.\nThe user who invoked the interaction.\nThe <code>user</code> object for the invoking user.\nThe user type of the team member.\nThe resolved users.\nThe choice value.\nThe given value.\nThe value to be sent for this option.\nWhen sending: Pre-filled value for this component; max …\nAn autoincremented version identifier updated during …\nAlways <code>1</code>.\nAlways <code>1</code>.\nAlways <code>1</code>.\nAlways <code>1</code>.\nA file uploaded with a message. Not to be confused with …\nAn indicator that the video quality is chosen by Discord …\nSee <code>ThreadMetadata::auto_archive_duration</code>.\nA message from an auto moderation action.\nAn indicator that the channel is a channel category.\nA container for any channel.\nDescribes extra features of the channel.\nAn indicator that the channel is now following a news …\nDiscord docs.\nA representation of a type of channel.\nA slash command.\nA context menu command.\nA representation of reaction count details.\nSort forum posts by creation time (from most recent to …\nA reaction with a <code>Guild</code>s custom <code>Emoji</code>, which is unique to …\nAn indicator that the channel is a directory <code>GuildChannel</code> …\nRepresents a rich embed which allows using richer …\nAn author object in an embed.\nA field object in an embed.\nFooter information for an embed.\nAn image object in an embed.\nThe provider of an embed.\nThe dimensions and URL of an embed thumbnail.\nVideo information for an embed.\nA container for the IDs returned by following a news …\nAn indicator that the channel is a forum <code>GuildChannel</code>.\nAn object that specifies the emoji to use for Forum …\nSee <code>GuildChannel::default_forum_layout</code>.\nAn object that represents a tag able to be applied to a …\nAn indicator that the video quality is 720p.\nDisplay posts as a collection of tiles.\nAn indicator that a call was started by the author.\nAn indicator that the channel is a group DM.\nAn indicator that the group icon was modified by the …\nAn indicator that the group name was modified by the …\nAn indicator that a recipient was added by the author.\nAn indicator that a recipient was removed by the author.\nA channel within a <code>Guild</code>.\nRepresents a guild’s text, news, or voice channel. Some …\nAn indicator that the guild is disqualified for Discovery …\nThe last warning before guild discovery removal.\nThe first warning before guild discovery removal.")